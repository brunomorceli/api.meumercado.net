generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id @default(uuid()) @db.Uuid
  email       String         @unique
  firstName   String?        @map("first_name")
  lastName    String?        @map("last_name")
  phoneNumber String?        @map("phone_number")
  cpfCnpj     String?        @map("cpf_cnpj")
  type        UserType       @default(ADMIN)
  status      UserStatusType @default(ACTIVE)
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime?      @updatedAt @map("updated_at")
  userId      String?        @map("user_id")
  ownerId     String?        @map("owner_id") @db.Uuid
  owner       User?          @relation("owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  authentications Authentication[]
  company         Company?
  products        Product[]
  owners          User[]           @relation("owner")
  CompanyUser     CompanyUser[]

  @@index([email])
  @@map("users")
}

model Authentication {
  id                    String                   @id @default(uuid()) @db.Uuid
  userId                String?                  @map("user_id") @db.Uuid
  user                  User?                    @relation(fields: [userId], references: [id])
  confirmationCode      String?                  @map("confirmation_code")
  metadata              Json?
  status                AuthenticationStatusType @default(PENDING)
  createdAt             DateTime                 @default(now()) @map("created_at")
  updatedAt             DateTime?                @updatedAt @map("updated_at")
  confirmationExpiredAt DateTime?                @map("confirmation_expired_at")
  authenticatedAt       DateTime?                @map("authenticated_at")

  @@index([userId])
  @@index([confirmationCode])
  @@map("authentications")
}

model Company {
  id          String  @id @default(uuid()) @db.Uuid
  label       String
  slug        String
  tenantId    String  @map("tenant_id")
  description String?
  logo        String?

  address           String?
  addressComplement String? @map("address_complement")
  neighborhood      String?
  addressNumber     Int?    @map("address_number")
  city              String?
  state             String?
  cep               String?

  phoneNumber String?           @map("phone_number")
  email       String?
  manager     String?
  categories  Json
  roles       Json
  status      CompanyStatusType @default(ACTIVE)
  ownerId     String            @unique @map("owner_id") @db.Uuid
  owner       User              @relation(fields: [ownerId], references: [id])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")

  companyUsers CompanyUser[]

  @@index([slug])
  @@index([tenantId])
  @@map("companies")
}

model Product {
  id            String            @id @default(uuid()) @db.Uuid
  label         String
  description   String?
  slug          String
  unlimited     Boolean           @default(false)
  quantity      Int?
  showPrice     Boolean           @default(true) @map("show_price")
  price         Int
  discountPrice Int?              @map("discount_price")
  sku           String?
  barcode       String?
  status        ProductStatusType @default(ACTIVE)
  categories    String[]          @default([]) @db.Uuid
  measures      Json
  attributes    Json
  pictures      String[]
  videos        String[]
  type          ProductType       @default(PHYSIC)
  ownerId       String            @map("owner_id") @db.Uuid
  owner         User              @relation(fields: [ownerId], references: [id])
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  deletedAt     DateTime?         @map("deleted_at")

  @@index([slug])
  @@index([sku])
  @@index([barcode])
  @@index([categories])
  @@map("products")
}

model CompanyUser {
  id        String                @id @default(uuid()) @db.Uuid
  type      CompanyUserType       @default(CLIENT)
  status    CompanyUserStatusType @default(ACTIVE)
  userId    String                @map("user_id") @db.Uuid
  user      User                  @relation(fields: [userId], references: [id])
  roles     String[]              @db.Uuid
  companyId String                @map("company_id") @db.Uuid
  company   Company               @relation(fields: [companyId], references: [id])

  deliveryDataId String?       @map("delivery_data_id") @db.Uuid
  deliveryData   DeliveryData? @relation(fields: [deliveryDataId], references: [id])

  billingDataId String?      @map("billing_data_id") @db.Uuid
  billingData   BillingData? @relation(fields: [billingDataId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("company_users")
}

model DeliveryData {
  id String @id @default(uuid()) @db.Uuid

  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  phoneNumber String? @map("phone_number")
  email       String?
  cpfCnpj     String? @map("cpf_cnpj")

  address           String?
  addressComplement String? @map("address_complement")
  neighborhood      String?
  addressNumber     Int?    @map("address_number")
  city              String?
  state             String?
  cep               String?

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  CompanyUser CompanyUser[]

  @@index([email])
  @@index([phoneNumber])
  @@map("delivery_datas")
}

model BillingData {
  id String @id @default(uuid()) @db.Uuid

  firstName   String  @map("first_name")
  lastName    String  @map("last_name")
  phoneNumber String? @map("phone_number")
  email       String?
  cpfCnpj     String? @map("cpf_cnpj")

  address           String?
  addressComplement String? @map("address_complement")
  neighborhood      String?
  addressNumber     Int?    @map("address_number")
  city              String?
  state             String?
  cep               String?

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")
  CompanyUser CompanyUser[]

  @@index([email])
  @@index([phoneNumber])
  @@map("billing_datas")
}

enum UserStatusType {
  ACTIVE
  INACTIVE
}

enum AuthenticationStatusType {
  PENDING
  ACTIVE
  INACTIVE
}

enum UserType {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum ProductStatusType {
  ACTIVE
  INACTIVE
  DELETED
}

enum CompanyStatusType {
  ACTIVE
  INACTIVE
  DELETED
}

enum CompanyUserStatusType {
  ACTIVE
  INACTIVE
  DELETED
}

enum CompanyUserType {
  OWNER
  EMPLOYEE
  CLIENT
}

enum ProductDiscountType {
  ACTIVE
  INACTIVE
  DELETED
}

enum ProductType {
  PHYSIC
  DIGITAL
}
