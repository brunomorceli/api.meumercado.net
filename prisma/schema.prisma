generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                String            @id @default(uuid()) @db.Uuid
  name              String
  tenantId          String            @unique @map("tenant_id")
  email             String            @unique
  phoneNumber       String?           @map("phone_number")
  address           String?
  addressComplement String?           @map("address_complement")
  neighborhood      String?
  addressNumber     String?           @map("address_number")
  city              String?
  state             String?
  cep               String?
  responsible       String?
  description       String?
  logo              String?
  categories        Json
  status            CompanyStatusType @default(ACTIVE)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")

  users    User[]
  products Product[]

  @@map("companies")
}

model User {
  id                String         @id @default(uuid()) @db.Uuid
  status            UserStatusType @default(ACTIVE)
  companyId         String         @map("company_id") @db.Uuid
  company           Company        @relation(fields: [companyId], references: [id])
  role              RoleType       @default(CUSTOMER)
  firstName         String
  lastName          String
  email             String         @unique
  phoneNumber       String?        @map("phone_number")
  cpfCnpj           String?        @map("cpf_cnpj")
  address           String?
  addressComplement String?        @map("address_complement")
  neighborhood      String?
  addressNumber     String?        @map("address_number")
  city              String?
  state             String?
  cep               String?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  deletedAt         DateTime?      @map("deleted_at")

  authentications Authentication[]
  billingDatas    BillingData[]
  deliveryDatas   DeliveryData[]

  @@map("users")
}

model BillingData {
  id                String  @id @default(uuid()) @db.Uuid
  email             String
  phoneNumber       String? @map("phone_number")
  cpfCnpj           String? @map("cpf_cnpj")
  address           String?
  addressComplement String? @map("address_complement")
  neighborhood      String?
  addressNumber     String? @map("address_number")
  city              String?
  state             String?
  cep               String?
  responsible       String?

  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("billing_data")
}

model DeliveryData {
  id                String  @id @default(uuid()) @db.Uuid
  email             String
  phoneNumber       String? @map("phone_number")
  cpfCnpj           String? @map("cpf_cnpj")
  address           String?
  addressComplement String? @map("address_complement")
  neighborhood      String?
  addressNumber     String? @map("address_number")
  city              String?
  state             String?
  cep               String?
  responsible       String?

  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("delivery_data")
}

model Authentication {
  id                    String                   @id @default(uuid()) @db.Uuid
  userId                String?                  @map("user_id") @db.Uuid
  user                  User?                    @relation(fields: [userId], references: [id])
  confirmationCode      String?                  @map("confirmation_code")
  metadata              Json?
  status                AuthenticationStatusType @default(PENDING)
  createdAt             DateTime                 @default(now()) @map("created_at")
  updatedAt             DateTime?                @updatedAt @map("updated_at")
  confirmationExpiredAt DateTime?                @map("confirmation_expired_at")
  authenticatedAt       DateTime?                @map("authenticated_at")

  @@index([userId])
  @@index([confirmationCode])
  @@map("authentications")
}

model Product {
  id            String            @id @default(uuid()) @db.Uuid
  label         String
  description   String?
  slug          String
  unlimited     Boolean           @default(false)
  quantity      Int?
  showPrice     Boolean           @default(true) @map("show_price")
  price         Int
  discountPrice Int?              @map("discount_price")
  sku           String?
  barcode       String?
  status        ProductStatusType @default(ACTIVE)
  categories    String[]          @default([]) @db.Uuid
  measures      Json
  attributes    Json
  pictures      String[]
  videos        String[]
  type          ProductType       @default(PHYSIC)
  companyId     String            @map("company_id") @db.Uuid
  company       Company           @relation(fields: [companyId], references: [id])
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  deletedAt     DateTime?         @map("deleted_at")

  @@index([slug])
  @@index([sku])
  @@index([barcode])
  @@index([categories])
  @@map("products")
}

enum RoleType {
  OWNER
  MEMBER
  CUSTOMER
  SUPPLIER
  NONE
}

enum UserStatusType {
  ACTIVE
  INACTIVE
}

enum AuthenticationStatusType {
  PENDING
  ACTIVE
  INACTIVE
}

enum ProductStatusType {
  ACTIVE
  INACTIVE
}

enum CompanyStatusType {
  ACTIVE
  INACTIVE
}

enum ProductType {
  PHYSIC
  DIGITAL
}
