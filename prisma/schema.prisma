generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid()) @db.Uuid
  email     String         @unique
  name      String?
  type      UserType       @default(ADMIN)
  status    UserStatusType @default(ACTIVE)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime?      @updatedAt @map("updated_at")
  userId    String?        @map("user_id")
  ownerId   String?        @map("owner_id") @db.Uuid
  owner     User?          @relation("owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  authentications Authentication[]
  companies       Company[]
  products        Product[]
  owners          User[]           @relation("owner")

  @@index([email])
  @@map("users")
}

model Authentication {
  id                    String                   @id @default(uuid()) @db.Uuid
  userId                String?                  @map("user_id") @db.Uuid
  user                  User?                    @relation(fields: [userId], references: [id])
  confirmationCode      String?                  @unique
  metadata              Json?
  status                AuthenticationStatusType @default(PENDING)
  createdAt             DateTime                 @default(now()) @map("created_at")
  updatedAt             DateTime?                @updatedAt @map("updated_at")
  confirmationExpiredAt DateTime?                @map("confirmation_expired_at")
  authenticatedAt       DateTime?                @map("authenticated_at")

  @@index([userId])
  @@index([confirmationCode])
  @@map("authentications")
}

model Company {
  id                String            @id @default(uuid()) @db.Uuid
  label             String
  slug              String
  subdomain         String
  description       String?
  address           String
  addressComplement String?           @map("address_complement")
  neighborhood      String
  addressNumber     Int               @map("address_number")
  city              String
  state             String
  cep               String
  logo              String?
  phoneNumber       String            @map("phone_number")
  status            CompanyStatusType @default(ACTIVE)
  categories        Json
  ownerId           String            @map("owner_id") @db.Uuid
  owner             User              @relation(fields: [ownerId], references: [id])
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")

  products Product[]

  @@index([slug])
  @@index([subdomain])
  @@unique([ownerId])
  @@map("companies")
}

model Product {
  id          String            @id @default(uuid()) @db.Uuid
  label       String
  description String?
  slug        String
  cover       String?
  unlimited   Boolean
  quantity    Int
  price       Int
  barcode     String
  status      ProductStatusType @default(ACTIVE)
  ownerId     String            @map("owner_id") @db.Uuid
  companyId   String            @map("company_id") @db.Uuid
  company     Company           @relation(fields: [companyId], references: [id])
  categories String[] @default([]) @db.Uuid
  owner       User              @relation(fields: [ownerId], references: [id])
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")

  @@index([slug])
  @@index([barcode])
  @@index([categories])
  @@map("products")
}

enum UserStatusType {
  ACTIVE
  INACTIVE
}

enum AuthenticationStatusType {
  PENDING
  ACTIVE
  INACTIVE
}

enum CategoryStatusType {
  ACTIVE
  INACTIVE
  DELETED
}

enum UserType {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum ProductStatusType {
  ACTIVE
  INACTIVE
  DELETED
}

enum CompanyStatusType {
  ACTIVE
  INACTIVE
  DELETED
}

enum ProductDiscountType {
  ACTIVE
  INACTIVE
  DELETED
}
